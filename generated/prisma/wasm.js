
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompaniesScalarFieldEnum = {
  company_id: 'company_id',
  company_name: 'company_name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  contact_person: 'contact_person',
  subscription_plan: 'subscription_plan',
  created_at: 'created_at',
  is_active: 'is_active'
};

exports.Prisma.Cost_categoriesScalarFieldEnum = {
  category_id: 'category_id',
  category_name: 'category_name',
  description: 'description',
  is_active: 'is_active'
};

exports.Prisma.DepartmentsScalarFieldEnum = {
  department_id: 'department_id',
  company_id: 'company_id',
  department_name: 'department_name',
  manager_name: 'manager_name',
  budget: 'budget'
};

exports.Prisma.Driver_certificationsScalarFieldEnum = {
  certification_id: 'certification_id',
  driver_id: 'driver_id',
  certification_name: 'certification_name',
  issuing_authority: 'issuing_authority',
  issue_date: 'issue_date',
  expiry_date: 'expiry_date',
  certification_number: 'certification_number',
  is_active: 'is_active'
};

exports.Prisma.DriversScalarFieldEnum = {
  driver_id: 'driver_id',
  company_id: 'company_id',
  employee_id: 'employee_id',
  first_name: 'first_name',
  last_name: 'last_name',
  license_number: 'license_number',
  license_class: 'license_class',
  license_expiry_date: 'license_expiry_date',
  date_of_birth: 'date_of_birth',
  hire_date: 'hire_date',
  phone: 'phone',
  email: 'email',
  address: 'address',
  emergency_contact_name: 'emergency_contact_name',
  emergency_contact_phone: 'emergency_contact_phone',
  salary: 'salary',
  status: 'status',
  safety_score: 'safety_score',
  total_miles_driven: 'total_miles_driven',
  years_experience: 'years_experience',
  created_at: 'created_at'
};

exports.Prisma.ExpensesScalarFieldEnum = {
  expense_id: 'expense_id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  category_id: 'category_id',
  expense_date: 'expense_date',
  amount: 'amount',
  description: 'description',
  vendor: 'vendor',
  invoice_number: 'invoice_number',
  receipt_available: 'receipt_available',
  approved_by: 'approved_by',
  approval_date: 'approval_date',
  reimbursable: 'reimbursable',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.Fuel_stationsScalarFieldEnum = {
  station_id: 'station_id',
  station_name: 'station_name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  brand: 'brand',
  has_fleet_card: 'has_fleet_card',
  avg_price_per_gallon: 'avg_price_per_gallon'
};

exports.Prisma.Fuel_transactionsScalarFieldEnum = {
  transaction_id: 'transaction_id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  fuel_station_id: 'fuel_station_id',
  transaction_date: 'transaction_date',
  odometer_reading: 'odometer_reading',
  gallons_purchased: 'gallons_purchased',
  price_per_gallon: 'price_per_gallon',
  total_amount: 'total_amount',
  fuel_type: 'fuel_type',
  payment_method: 'payment_method',
  card_number_last_four: 'card_number_last_four',
  receipt_number: 'receipt_number',
  mpg_calculated: 'mpg_calculated',
  notes: 'notes'
};

exports.Prisma.Gps_trackingScalarFieldEnum = {
  tracking_id: 'tracking_id',
  vehicle_id: 'vehicle_id',
  timestamp: 'timestamp',
  latitude: 'latitude',
  longitude: 'longitude',
  speed: 'speed',
  heading: 'heading',
  altitude: 'altitude',
  gps_quality: 'gps_quality',
  engine_status: 'engine_status',
  fuel_level_percent: 'fuel_level_percent',
  odometer: 'odometer'
};

exports.Prisma.IncidentsScalarFieldEnum = {
  incident_id: 'incident_id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  incident_date: 'incident_date',
  incident_type: 'incident_type',
  severity: 'severity',
  location: 'location',
  description: 'description',
  police_report_number: 'police_report_number',
  insurance_claim_number: 'insurance_claim_number',
  estimated_damage_cost: 'estimated_damage_cost',
  actual_repair_cost: 'actual_repair_cost',
  injuries_reported: 'injuries_reported',
  fatalities: 'fatalities',
  at_fault: 'at_fault',
  weather_conditions: 'weather_conditions',
  road_conditions: 'road_conditions',
  photos_available: 'photos_available',
  status: 'status',
  resolution_date: 'resolution_date',
  lessons_learned: 'lessons_learned',
  created_at: 'created_at'
};

exports.Prisma.Maintenance_recordsScalarFieldEnum = {
  maintenance_id: 'maintenance_id',
  vehicle_id: 'vehicle_id',
  maintenance_type_id: 'maintenance_type_id',
  service_provider_id: 'service_provider_id',
  scheduled_date: 'scheduled_date',
  completed_date: 'completed_date',
  odometer_at_service: 'odometer_at_service',
  cost: 'cost',
  labor_hours: 'labor_hours',
  description: 'description',
  parts_used: 'parts_used',
  technician_name: 'technician_name',
  status: 'status',
  next_service_due_date: 'next_service_due_date',
  next_service_due_miles: 'next_service_due_miles',
  warranty_expiry_date: 'warranty_expiry_date',
  invoice_number: 'invoice_number',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.Maintenance_typesScalarFieldEnum = {
  maintenance_type_id: 'maintenance_type_id',
  type_name: 'type_name',
  description: 'description',
  recommended_interval_miles: 'recommended_interval_miles',
  recommended_interval_months: 'recommended_interval_months',
  estimated_cost: 'estimated_cost'
};

exports.Prisma.ReportsScalarFieldEnum = {
  report_id: 'report_id',
  company_id: 'company_id',
  report_name: 'report_name',
  report_type: 'report_type',
  generated_by: 'generated_by',
  generation_date: 'generation_date',
  date_range_start: 'date_range_start',
  date_range_end: 'date_range_end',
  parameters: 'parameters',
  file_path: 'file_path',
  status: 'status'
};

exports.Prisma.Safety_inspectionsScalarFieldEnum = {
  inspection_id: 'inspection_id',
  vehicle_id: 'vehicle_id',
  inspector_name: 'inspector_name',
  inspection_date: 'inspection_date',
  inspection_type: 'inspection_type',
  odometer_reading: 'odometer_reading',
  overall_score: 'overall_score',
  passed: 'passed',
  defects_found: 'defects_found',
  critical_defects: 'critical_defects',
  notes: 'notes',
  next_inspection_due: 'next_inspection_due',
  certificate_number: 'certificate_number'
};

exports.Prisma.Service_providersScalarFieldEnum = {
  provider_id: 'provider_id',
  company_id: 'company_id',
  provider_name: 'provider_name',
  service_type: 'service_type',
  contact_person: 'contact_person',
  phone: 'phone',
  email: 'email',
  address: 'address',
  hourly_rate: 'hourly_rate',
  rating: 'rating',
  is_preferred: 'is_preferred'
};

exports.Prisma.TripsScalarFieldEnum = {
  trip_id: 'trip_id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  start_time: 'start_time',
  end_time: 'end_time',
  start_location: 'start_location',
  end_location: 'end_location',
  start_odometer: 'start_odometer',
  end_odometer: 'end_odometer',
  distance_traveled: 'distance_traveled',
  purpose: 'purpose',
  trip_type: 'trip_type',
  fuel_consumed: 'fuel_consumed',
  average_speed: 'average_speed',
  max_speed: 'max_speed',
  idle_time_minutes: 'idle_time_minutes',
  harsh_braking_count: 'harsh_braking_count',
  harsh_acceleration_count: 'harsh_acceleration_count',
  speeding_violations: 'speeding_violations',
  route_efficiency_score: 'route_efficiency_score',
  cost: 'cost',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  company_id: 'company_id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  first_name: 'first_name',
  last_name: 'last_name',
  role: 'role',
  phone: 'phone',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at'
};

exports.Prisma.Vehicle_assignmentsScalarFieldEnum = {
  assignment_id: 'assignment_id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  assigned_date: 'assigned_date',
  end_date: 'end_date',
  assignment_type: 'assignment_type',
  notes: 'notes',
  is_active: 'is_active'
};

exports.Prisma.Vehicle_typesScalarFieldEnum = {
  type_id: 'type_id',
  type_name: 'type_name',
  description: 'description',
  fuel_efficiency_rating: 'fuel_efficiency_rating',
  capacity_passengers: 'capacity_passengers',
  capacity_cargo_cubic_feet: 'capacity_cargo_cubic_feet'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  vehicle_id: 'vehicle_id',
  company_id: 'company_id',
  vehicle_type_id: 'vehicle_type_id',
  vin: 'vin',
  license_plate: 'license_plate',
  make: 'make',
  model: 'model',
  year: 'year',
  color: 'color',
  fuel_type: 'fuel_type',
  engine_size: 'engine_size',
  transmission: 'transmission',
  purchase_date: 'purchase_date',
  purchase_price: 'purchase_price',
  current_value: 'current_value',
  odometer_reading: 'odometer_reading',
  fuel_capacity: 'fuel_capacity',
  insurance_policy_number: 'insurance_policy_number',
  insurance_expiry: 'insurance_expiry',
  registration_expiry: 'registration_expiry',
  status: 'status',
  gps_device_id: 'gps_device_id',
  assigned_driver_id: 'assigned_driver_id',
  department_id: 'department_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  companies: 'companies',
  cost_categories: 'cost_categories',
  departments: 'departments',
  driver_certifications: 'driver_certifications',
  drivers: 'drivers',
  expenses: 'expenses',
  fuel_stations: 'fuel_stations',
  fuel_transactions: 'fuel_transactions',
  gps_tracking: 'gps_tracking',
  incidents: 'incidents',
  maintenance_records: 'maintenance_records',
  maintenance_types: 'maintenance_types',
  reports: 'reports',
  safety_inspections: 'safety_inspections',
  service_providers: 'service_providers',
  trips: 'trips',
  users: 'users',
  vehicle_assignments: 'vehicle_assignments',
  vehicle_types: 'vehicle_types',
  vehicles: 'vehicles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
